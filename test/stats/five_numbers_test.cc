/*
   Copyright 2019 Florin Iucha

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#include <statistics.h>

#include <gtest/gtest.h>

#include <array>

using ftags::stats::FiveNumbersSummary;
using ftags::stats::Sample;

TEST(FiveNumbersTest, Block1)
{
   // clang-format off
   const std::array<unsigned, 1024> data =
   {
      85, 41, 19, 25, 30, 76, 6, 131, 119, 72, 1, 39, 8, 34, 70, 37,
      9, 77, 47, 41, 157, 2, 488, 18, 26, 14, 16, 16, 2, 0, 27, 314,
      320, 94, 14, 6, 138, 39, 75, 54, 18, 37, 11, 53, 152, 7, 54, 141,
      46, 4, 193, 17, 76, 64, 10, 73, 24, 162, 8, 16, 17, 88, 3, 24,
      184, 1, 222, 252, 206, 74, 15, 141, 72, 47, 127, 18, 58, 318, 66, 143,
      41, 2, 118, 171, 81, 14, 0, 69, 69, 147, 30, 13, 148, 40, 8, 74,
      35, 102, 92, 87, 160, 17, 34, 10, 214, 73, 19, 16, 88, 9, 60, 0,
      128, 0, 59, 17, 7, 16, 147, 4, 33, 69, 240, 33, 12, 64, 95, 198,
      7, 47, 80, 186, 24, 75, 41, 40, 92, 32, 136, 128, 1, 31, 6, 34,
      54, 11, 55, 5, 10, 132, 66, 363, 41, 5, 86, 39, 20, 15, 9, 52,
      73, 110, 35, 15, 183, 50, 16, 27, 3, 10, 8, 0, 0, 1, 109, 0,
      242, 32, 120, 37, 84, 36, 45, 0, 107, 80, 38, 198, 141, 25, 169, 98,
      53, 12, 40, 7, 56, 64, 42, 12, 99, 0, 220, 53, 113, 93, 229, 8,
      1, 17, 77, 101, 45, 45, 170, 16, 58, 80, 6, 28, 142, 118, 68, 254,
      87, 210, 120, 20, 66, 128, 223, 124, 33, 97, 27, 63, 118, 123, 112, 52,
      12, 30, 23, 97, 37, 23, 36, 391, 130, 49, 13, 35, 80, 7, 1, 22,
      18, 52, 181, 17, 125, 30, 44, 262, 0, 225, 59, 69, 69, 91, 26, 129,
      18, 64, 74, 140, 109, 1, 42, 12, 72, 4, 18, 187, 39, 171, 61, 49,
      160, 3, 1, 31, 9, 29, 1, 42, 17, 89, 80, 193, 7, 2, 25, 84,
      112, 57, 38, 11, 74, 25, 14, 64, 29, 55, 109, 4, 31, 83, 83, 15,
      137, 114, 175, 29, 46, 52, 13, 36, 22, 61, 24, 47, 14, 61, 73, 56,
      4, 91, 2, 0, 14, 12, 33, 104, 21, 17, 167, 26, 8, 9, 136, 35,
      60, 17, 174, 0, 89, 34, 10, 18, 0, 29, 9, 115, 8, 23, 27, 92,
      8, 35, 183, 115, 51, 55, 21, 286, 28, 1, 61, 5, 14, 12, 17, 0,
      21, 62, 195, 7, 47, 89, 6, 51, 16, 7, 83, 51, 324, 178, 51, 73,
      51, 32, 23, 61, 206, 11, 90, 47, 82, 157, 18, 117, 21, 102, 50, 20,
      104, 100, 146, 19, 84, 58, 44, 19, 231, 6, 16, 2, 269, 230, 30, 47,
      38, 42, 98, 130, 399, 59, 9, 10, 9, 30, 147, 14, 160, 35, 5, 61,
      61, 11, 70, 5, 58, 64, 31, 33, 8, 43, 14, 64, 32, 99, 61, 15,
      36, 48, 164, 69, 85, 23, 42, 71, 41, 2, 45, 91, 55, 16, 42, 6,
      3, 31, 84, 0, 18, 57, 26, 48, 78, 7, 100, 103, 152, 21, 15, 15,
      23, 10, 117, 40, 8, 26, 34, 25, 0, 24, 42, 77, 126, 245, 128, 8,
      31, 78, 56, 117, 53, 30, 135, 15, 0, 68, 52, 45, 10, 148, 29, 58,
      36, 47, 79, 31, 4, 15, 143, 73, 94, 43, 40, 64, 52, 49, 127, 18,
      245, 22, 191, 42, 80, 128, 32, 175, 127, 22, 42, 62, 196, 25, 7, 14,
      101, 5, 255, 20, 6, 14, 75, 14, 4, 54, 24, 15, 21, 1, 76, 2,
      35, 55, 10, 74, 38, 48, 40, 103, 4, 15, 80, 13, 4, 22, 14, 55,
      78, 97, 17, 95, 9, 23, 128, 8, 155, 22, 63, 43, 41, 2, 74, 4,
      7, 51, 15, 21, 134, 61, 94, 215, 13, 14, 197, 138, 155, 23, 34, 38,
      142, 31, 10, 22, 4, 63, 2, 25, 133, 43, 1, 22, 206, 92, 25, 115,
      43, 86, 39, 14, 48, 10, 11, 35, 0, 30, 0, 66, 20, 102, 164, 55,
      2, 59, 3, 29, 93, 50, 2, 113, 120, 79, 46, 127, 111, 115, 103, 18,
      57, 69, 72, 1, 38, 107, 66, 42, 114, 21, 413, 47, 49, 24, 75, 49,
      18, 9, 18, 92, 18, 166, 5, 187, 13, 40, 18, 44, 27, 69, 3, 63,
      16, 133, 5, 46, 54, 32, 26, 196, 127, 50, 2, 11, 4, 9, 10, 244,
      7, 122, 156, 251, 45, 223, 6, 59, 13, 121, 23, 150, 158, 158, 43, 66,
      147, 17, 46, 22, 36, 53, 16, 20, 8, 47, 48, 109, 101, 52, 42, 483,
      181, 79, 38, 168, 49, 37, 123, 31, 175, 111, 11, 45, 91, 53, 174, 119,
      24, 192, 227, 177, 20, 116, 95, 12, 91, 108, 14, 1, 81, 50, 46, 5,
      277, 35, 65, 25, 133, 70, 24, 29, 0, 13, 136, 33, 9, 83, 104, 60,
      48, 116, 7, 7, 77, 87, 133, 8, 224, 62, 2, 71, 28, 15, 110, 72,
      27, 0, 28, 38, 322, 126, 26, 115, 17, 15, 7, 330, 10, 23, 62, 60,
      133, 31, 26, 100, 37, 91, 21, 55, 6, 26, 100, 33, 52, 46, 16, 287,
      24, 97, 2, 7, 40, 12, 26, 28, 135, 59, 52, 46, 147, 102, 54, 7,
      25, 24, 108, 59, 94, 191, 6, 28, 122, 6, 71, 6, 4, 7, 16, 13,
      224, 67, 1, 3, 81, 105, 45, 92, 17, 35, 166, 228, 151, 82, 18, 167,
      14, 6, 1, 68, 186, 45, 236, 71, 180, 94, 50, 47, 18, 118, 3, 99,
      43, 98, 11, 21, 9, 42, 35, 183, 43, 12, 14, 113, 97, 131, 188, 55,
      9, 116, 113, 4, 20, 6, 157, 78, 25, 33, 66, 48, 41, 7, 90, 26,
      68, 34, 87, 163, 30, 76, 10, 71, 68, 0, 75, 48, 10, 168, 75, 154,
      34, 33, 43, 44, 64, 19, 17, 212, 93, 14, 47, 2, 92, 16, 149, 17,
      344, 0, 76, 82, 83, 15, 65, 122, 16, 11, 95, 114, 36, 70, 31, 207,
      128, 70, 38, 70, 34, 117, 1, 166, 1, 1, 94, 77, 61, 61, 21, 139,
      14, 52, 20, 8, 18, 79, 7, 82, 48, 29, 50, 168, 52, 44, 20, 84,
   };
   // clang-format on

   const FiveNumbersSummary<unsigned> expected{/* minimum       = */ 0,
                                               /* lowerQuartile = */ 17,
                                               /* median        = */ 45,
                                               /* upperQuartile = */ 92,
                                               /* maximum       = */ 488};

   Sample<unsigned> sample;

   for (auto val : data)
   {
      sample.addValue(val);
   }

   const FiveNumbersSummary<unsigned> actual = sample.computeFiveNumberSummary();

   ASSERT_EQ(actual.minimum, expected.minimum) << "minimum value";
   ASSERT_EQ(actual.lowerQuartile, expected.lowerQuartile) << "lower quartile value";
   ASSERT_EQ(actual.median, expected.median) << "median value";
   ASSERT_EQ(actual.upperQuartile, expected.upperQuartile) << "upper quartile value";
   ASSERT_EQ(actual.maximum, expected.maximum) << "maximum value";
}

TEST(FiveNumbersTest, Block2)
{
   // clang-format off
   const std::array<unsigned, 1024> data =
   {
      88, 85, 63, 74, 150, 94, 110, 129, 34, 188, 17, 2, 62, 0, 12, 7,
      69, 71, 62, 26, 91, 32, 9, 0, 74, 101, 20, 65, 203, 17, 32, 93,
      126, 31, 61, 25, 62, 26, 41, 35, 7, 0, 50, 135, 11, 76, 71, 14,
      12, 17, 199, 14, 45, 1, 19, 19, 33, 131, 181, 69, 107, 1, 149, 40,
      132, 82, 10, 170, 2, 40, 16, 69, 44, 56, 62, 60, 13, 96, 6, 103,
      8, 43, 76, 106, 50, 18, 6, 139, 68, 48, 0, 50, 277, 58, 27, 149,
      95, 40, 16, 33, 9, 39, 45, 34, 90, 4, 184, 61, 2, 129, 59, 26,
      34, 17, 45, 43, 86, 66, 86, 60, 73, 50, 2, 57, 0, 24, 23, 15,
      94, 204, 166, 137, 24, 8, 221, 30, 88, 73, 50, 168, 18, 69, 64, 103,
      21, 249, 10, 53, 6, 175, 84, 44, 52, 85, 20, 93, 75, 92, 34, 83,
      146, 337, 7, 3, 18, 29, 4, 1, 14, 143, 15, 55, 115, 63, 41, 3,
      16, 60, 73, 64, 5, 42, 107, 24, 41, 32, 141, 32, 36, 7, 90, 214,
      231, 167, 5, 25, 42, 60, 80, 63, 14, 4, 20, 46, 34, 95, 56, 33,
      121, 234, 21, 89, 7, 119, 15, 35, 1, 23, 6, 3, 6, 79, 26, 63,
      62, 102, 237, 49, 34, 188, 61, 222, 58, 65, 0, 41, 25, 79, 42, 20,
      65, 2, 101, 38, 106, 63, 281, 11, 15, 3, 58, 5, 96, 52, 9, 0,
      169, 3, 130, 2, 31, 1, 34, 21, 125, 3, 161, 30, 16, 7, 139, 61,
      38, 18, 13, 34, 187, 40, 75, 19, 3, 57, 9, 34, 4, 96, 192, 51,
      50, 78, 4, 11, 11, 3, 241, 198, 100, 51, 67, 61, 107, 24, 110, 7,
      80, 5, 8, 97, 36, 31, 28, 11, 109, 116, 25, 19, 45, 136, 4, 32,
      54, 48, 0, 12, 38, 96, 9, 14, 17, 30, 19, 95, 26, 23, 29, 149,
      182, 35, 59, 131, 215, 197, 71, 90, 202, 42, 90, 94, 3, 163, 49, 55,
      12, 149, 115, 126, 114, 20, 13, 12, 84, 23, 121, 2, 64, 38, 6, 60,
      10, 69, 133, 20, 67, 5, 65, 169, 42, 1, 119, 188, 8, 80, 16, 3,
      48, 26, 108, 1, 130, 4, 95, 1, 345, 113, 16, 124, 7, 22, 1, 232,
      12, 1, 141, 14, 56, 263, 14, 55, 11, 84, 48, 165, 38, 45, 72, 2,
      6, 32, 32, 41, 136, 8, 38, 68, 94, 38, 20, 11, 121, 20, 141, 216,
      22, 12, 74, 30, 12, 78, 52, 38, 75, 24, 159, 74, 72, 77, 31, 0,
      57, 190, 94, 14, 44, 32, 100, 9, 104, 12, 86, 115, 168, 40, 132, 5,
      34, 67, 5, 32, 26, 15, 40, 93, 7, 33, 48, 8, 31, 102, 59, 111,
      67, 51, 30, 79, 8, 120, 35, 9, 43, 2, 13, 262, 0, 137, 4, 4,
      9, 29, 6, 59, 31, 80, 195, 13, 47, 10, 35, 10, 41, 42, 53, 60,
      91, 8, 77, 136, 63, 61, 61, 151, 3, 79, 95, 196, 156, 79, 105, 127,
      11, 49, 3, 14, 29, 211, 168, 24, 189, 14, 124, 24, 44, 47, 266, 39,
      9, 13, 57, 68, 27, 32, 179, 23, 269, 54, 31, 38, 99, 38, 166, 26,
      80, 10, 14, 65, 187, 219, 13, 72, 10, 14, 180, 365, 8, 215, 122, 52,
      50, 63, 150, 6, 17, 45, 16, 57, 5, 31, 4, 128, 41, 83, 18, 75,
      0, 51, 33, 8, 183, 9, 59, 6, 6, 68, 36, 64, 123, 84, 86, 11,
      36, 514, 57, 33, 13, 77, 6, 32, 4, 193, 86, 231, 38, 32, 152, 105,
      101, 1, 13, 75, 207, 9, 3, 6, 31, 70, 52, 51, 187, 118, 84, 26,
      61, 38, 37, 9, 173, 140, 12, 98, 97, 28, 50, 71, 45, 167, 20, 53,
      5, 1, 146, 94, 5, 14, 66, 17, 99, 85, 94, 124, 88, 28, 6, 25,
      137, 124, 104, 106, 25, 72, 29, 78, 9, 5, 80, 68, 6, 262, 90, 125,
      7, 14, 42, 12, 6, 119, 37, 52, 97, 36, 78, 3, 123, 11, 84, 119,
      9, 22, 123, 5, 17, 43, 102, 27, 10, 36, 94, 38, 5, 214, 13, 181,
      82, 13, 89, 159, 34, 57, 22, 40, 22, 115, 17, 13, 9, 9, 37, 5,
      4, 63, 206, 103, 32, 18, 13, 8, 32, 107, 100, 60, 97, 22, 79, 146,
      22, 7, 57, 142, 141, 59, 22, 3, 62, 139, 91, 118, 112, 12, 47, 36,
      79, 227, 259, 8, 227, 25, 161, 55, 114, 100, 105, 84, 27, 4, 47, 28,
      8, 112, 2, 5, 88, 57, 14, 84, 178, 98, 223, 76, 113, 8, 37, 82,
      25, 49, 71, 41, 86, 11, 15, 134, 305, 93, 332, 13, 10, 133, 57, 39,
      39, 39, 32, 21, 5, 42, 159, 125, 30, 36, 31, 28, 15, 51, 61, 45,
      75, 32, 145, 168, 30, 81, 83, 7, 11, 171, 251, 85, 28, 38, 153, 43,
      35, 20, 3, 47, 38, 11, 57, 12, 35, 24, 30, 201, 7, 140, 273, 129,
      64, 28, 2, 47, 8, 43, 4, 33, 125, 11, 73, 93, 37, 45, 32, 7,
      12, 85, 6, 89, 2, 31, 98, 32, 203, 91, 93, 105, 32, 9, 91, 14,
      60, 38, 39, 22, 38, 5, 149, 52, 12, 233, 63, 108, 31, 148, 3, 119,
      13, 35, 184, 19, 27, 33, 99, 26, 125, 19, 42, 170, 53, 95, 65, 71,
      22, 6, 49, 66, 156, 99, 0, 17, 162, 15, 36, 39, 76, 78, 29, 58,
      18, 29, 22, 38, 8, 122, 143, 33, 68, 127, 26, 92, 40, 268, 24, 1,
      89, 3, 54, 237, 102, 16, 63, 117, 30, 4, 26, 3, 198, 77, 16, 16,
      1, 22, 48, 9, 76, 25, 99, 69, 115, 40, 16, 348, 44, 10, 47, 85,
      1, 77, 22, 14, 11, 49, 19, 98, 11, 5, 135, 37, 32, 96, 337, 39,
      35, 208, 7, 3, 134, 61, 3, 117, 7, 33, 124, 113, 44, 15, 26, 52,
   };
   // clang-format on

   const FiveNumbersSummary<unsigned> expected{/* minimum       = */ 0,
                                               /* lowerQuartile = */ 17,
                                               /* median        = */ 45,
                                               /* upperQuartile = */ 94,
                                               /* maximum       = */ 514};

   Sample<unsigned> sample;

   for (auto val : data)
   {
      sample.addValue(val);
   }

   const FiveNumbersSummary<unsigned> actual = sample.computeFiveNumberSummary();

   ASSERT_EQ(actual.minimum, expected.minimum) << "minimum value";
   ASSERT_EQ(actual.lowerQuartile, expected.lowerQuartile) << "lower quartile value";
   ASSERT_EQ(actual.median, expected.median) << "median value";
   ASSERT_EQ(actual.upperQuartile, expected.upperQuartile) << "upper quartile value";
   ASSERT_EQ(actual.maximum, expected.maximum) << "maximum value";
}

TEST(FiveNumbersTest, Block3)
{
   // clang-format off
   const std::array<unsigned, 1024> data =
   {
      131, 42, 24, 66, 39, 70, 1, 144, 60, 21, 12, 133, 22, 7, 132, 27,
      35, 3, 18, 16, 24, 25, 13, 4, 95, 50, 138, 93, 18, 73, 24, 83,
      24, 23, 5, 1, 50, 26, 78, 393, 16, 103, 55, 18, 241, 28, 10, 45,
      190, 60, 112, 28, 221, 78, 100, 175, 56, 89, 131, 15, 2, 74, 3, 37,
      54, 135, 11, 0, 43, 37, 211, 0, 109, 49, 193, 14, 160, 97, 15, 0,
      58, 35, 10, 158, 174, 44, 59, 22, 45, 29, 4, 105, 15, 46, 4, 6,
      43, 11, 7, 108, 21, 36, 27, 65, 145, 7, 11, 384, 36, 12, 49, 137,
      9, 38, 32, 34, 66, 50, 244, 144, 2, 64, 3, 85, 33, 96, 56, 135,
      93, 39, 124, 120, 1, 117, 107, 15, 164, 235, 11, 14, 11, 56, 76, 117,
      179, 23, 15, 133, 67, 12, 34, 52, 2, 27, 80, 24, 39, 49, 15, 137,
      76, 98, 39, 48, 17, 63, 110, 43, 2, 185, 37, 48, 56, 129, 99, 22,
      46, 311, 164, 5, 3, 5, 2, 43, 61, 17, 28, 61, 22, 51, 20, 37,
      1, 73, 2, 22, 11, 40, 119, 40, 139, 27, 64, 84, 56, 15, 22, 52,
      177, 92, 8, 22, 3, 99, 42, 53, 102, 46, 4, 50, 46, 237, 20, 126,
      117, 183, 24, 24, 79, 82, 10, 55, 37, 58, 115, 1, 5, 3, 28, 43,
      58, 10, 103, 16, 2, 21, 28, 125, 22, 56, 31, 10, 71, 7, 48, 48,
      96, 2, 49, 65, 122, 149, 11, 146, 24, 52, 40, 98, 9, 26, 22, 421,
      21, 168, 129, 4, 112, 60, 99, 44, 179, 506, 187, 50, 241, 72, 62, 267,
      27, 13, 50, 139, 39, 55, 45, 32, 73, 14, 47, 57, 33, 55, 55, 16,
      27, 67, 210, 199, 35, 74, 66, 19, 7, 66, 27, 223, 42, 38, 40, 125,
      29, 23, 120, 4, 14, 11, 139, 33, 122, 175, 32, 22, 63, 7, 226, 79,
      65, 10, 72, 32, 85, 119, 66, 66, 66, 39, 26, 11, 81, 31, 46, 5,
      34, 16, 195, 13, 10, 126, 51, 44, 95, 24, 17, 66, 20, 100, 4, 32,
      18, 6, 171, 7, 1, 51, 101, 7, 10, 57, 74, 89, 334, 14, 33, 0,
      128, 18, 41, 105, 2, 122, 61, 95, 84, 0, 6, 91, 41, 0, 181, 86,
      48, 58, 163, 71, 1, 105, 9, 28, 123, 28, 3, 2, 54, 110, 31, 48,
      34, 18, 150, 100, 143, 3, 66, 64, 48, 39, 114, 147, 24, 44, 48, 72,
      125, 8, 18, 48, 55, 200, 159, 15, 113, 17, 58, 48, 19, 84, 22, 14,
      42, 47, 58, 8, 69, 18, 171, 3, 104, 21, 99, 155, 29, 18, 3, 138,
      150, 62, 35, 28, 90, 273, 47, 42, 53, 17, 315, 75, 22, 105, 11, 50,
      143, 5, 290, 51, 134, 95, 24, 24, 14, 16, 77, 60, 60, 4, 19, 93,
      21, 30, 98, 4, 1, 35, 85, 5, 17, 21, 117, 55, 45, 32, 47, 25,
      35, 33, 14, 13, 13, 44, 17, 205, 20, 172, 16, 77, 4, 139, 39, 36,
      117, 6, 32, 191, 22, 101, 6, 6, 265, 83, 41, 56, 125, 74, 18, 54,
      19, 143, 48, 26, 25, 104, 53, 6, 94, 65, 209, 44, 7, 140, 59, 46,
      81, 7, 133, 55, 105, 10, 161, 13, 98, 385, 161, 116, 14, 4, 39, 215,
      48, 73, 13, 89, 203, 12, 123, 81, 64, 60, 55, 36, 31, 0, 27, 10,
      144, 36, 121, 57, 155, 55, 38, 114, 1, 31, 89, 153, 7, 19, 73, 58,
      17, 26, 4, 0, 113, 183, 41, 63, 35, 23, 132, 121, 5, 49, 34, 3,
      0, 8, 30, 57, 39, 40, 63, 72, 104, 568, 63, 87, 74, 126, 69, 82,
      50, 28, 31, 29, 14, 20, 127, 73, 174, 1, 2, 0, 0, 25, 9, 171,
      8, 42, 22, 2, 18, 73, 9, 261, 3, 154, 15, 19, 128, 16, 35, 77,
      33, 21, 1, 29, 54, 52, 23, 33, 2, 1, 130, 66, 21, 4, 115, 7,
      188, 181, 31, 129, 53, 95, 68, 62, 55, 11, 12, 72, 185, 65, 60, 187,
      72, 37, 47, 81, 40, 104, 20, 67, 9, 95, 35, 63, 52, 34, 146, 73,
      67, 189, 216, 31, 25, 131, 52, 16, 41, 17, 14, 0, 18, 236, 6, 20,
      33, 25, 25, 9, 52, 37, 52, 16, 1, 16, 100, 22, 21, 169, 27, 10,
      27, 30, 11, 65, 160, 26, 5, 19, 8, 122, 82, 19, 13, 128, 53, 40,
      58, 131, 78, 68, 140, 66, 49, 330, 70, 41, 283, 57, 66, 3, 36, 5,
      2, 15, 37, 128, 56, 8, 1, 120, 106, 34, 98, 286, 28, 11, 5, 9,
      8, 29, 90, 40, 73, 127, 14, 86, 85, 41, 53, 66, 24, 49, 1, 58,
      12, 26, 10, 10, 127, 19, 58, 18, 85, 17, 21, 67, 105, 136, 9, 15,
      47, 88, 120, 69, 34, 86, 68, 158, 53, 87, 104, 133, 83, 18, 298, 65,
      78, 10, 25, 34, 35, 6, 13, 215, 59, 23, 122, 54, 45, 133, 7, 150,
      120, 204, 60, 126, 65, 15, 49, 227, 97, 351, 30, 67, 146, 157, 6, 39,
      49, 115, 14, 225, 28, 147, 176, 68, 194, 15, 80, 87, 49, 97, 81, 10,
      43, 61, 99, 10, 27, 11, 31, 128, 45, 59, 57, 12, 34, 47, 45, 36,
      37, 4, 111, 24, 31, 87, 0, 43, 5, 116, 33, 67, 24, 181, 60, 47,
      41, 23, 94, 5, 4, 53, 125, 4, 115, 19, 21, 144, 5, 14, 209, 2,
      0, 41, 93, 13, 9, 190, 14, 78, 15, 48, 21, 15, 31, 283, 20, 104,
      124, 62, 53, 25, 0, 64, 16, 196, 163, 54, 4, 7, 74, 14, 24, 12,
      17, 84, 114, 10, 21, 52, 1, 3, 50, 27, 54, 117, 48, 80, 14, 24,
      7, 52, 87, 31, 136, 48, 39, 35, 45, 68, 53, 7, 180, 75, 84, 2,
      88, 227, 90, 25, 128, 14, 2, 75, 196, 91, 7, 63, 3, 82, 54, 44,
   };
   // clang-format on

   const FiveNumbersSummary<unsigned> expected{/* minimum       = */ 0,
                                               /* lowerQuartile = */ 18,
                                               /* median        = */ 47,
                                               /* upperQuartile = */ 90,
                                               /* maximum       = */ 568};

   Sample<unsigned> sample;

   for (auto val : data)
   {
      sample.addValue(val);
   }

   const FiveNumbersSummary<unsigned> actual = sample.computeFiveNumberSummary();

   ASSERT_EQ(actual.minimum, expected.minimum) << "minimum value";
   ASSERT_EQ(actual.lowerQuartile, expected.lowerQuartile) << "lower quartile value";
   ASSERT_EQ(actual.median, expected.median) << "median value";
   ASSERT_EQ(actual.upperQuartile, expected.upperQuartile) << "upper quartile value";
   ASSERT_EQ(actual.maximum, expected.maximum) << "maximum value";
}
